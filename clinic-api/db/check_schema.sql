-- clinic-api/db/check_schema.sql
-- Comprehensive schema verification for LV Notas database

\echo '============================================================================='
\echo 'LV NOTAS DATABASE SCHEMA CHECK'
\echo '============================================================================='

\echo ''
\echo 'üìä TABLES OVERVIEW'
\echo '-------------------'
SELECT 
    table_name, 
    table_type,
    CASE 
        WHEN table_name IN ('therapists', 'patients', 'sessions', 'calendar_events', 'check_ins', 'calendar_webhooks') THEN '‚úÖ Core'
        WHEN table_name IN ('therapist_onboarding', 'imported_calendar_events', 'patient_matching_candidates', 'recurring_session_templates') THEN 'üéØ Onboarding'
        WHEN table_name IN ('therapist_billing_history', 'patient_billing_history', 'billing_periods') THEN 'üí∞ Billing'
        WHEN table_name IN ('bank_connections', 'bank_transactions', 'payment_matches') THEN 'üè¶ Banking'
        WHEN table_name IN ('therapist_nfse_config', 'nfse_invoices') THEN 'üßæ NFS-e'
        WHEN table_type = 'VIEW' THEN 'üìã View'
        ELSE '‚ùì Other'
    END as category
FROM information_schema.tables 
WHERE table_schema = 'public' 
ORDER BY category, table_name;

\echo ''
\echo 'üîó FOREIGN KEY RELATIONSHIPS'
\echo '------------------------------'
SELECT 
    tc.table_name as "From Table", 
    kcu.column_name as "Column", 
    ccu.table_name as "References Table",
    ccu.column_name as "References Column"
FROM information_schema.table_constraints AS tc 
JOIN information_schema.key_column_usage AS kcu
    ON tc.constraint_name = kcu.constraint_name
JOIN information_schema.constraint_column_usage AS ccu
    ON ccu.constraint_name = tc.constraint_name
WHERE tc.constraint_type = 'FOREIGN KEY'
    AND tc.table_schema = 'public'
ORDER BY tc.table_name, kcu.column_name;

\echo ''
\echo 'üè¶ BANKING INTEGRATION STRUCTURE'
\echo '---------------------------------'
SELECT 
    column_name as "Column",
    data_type as "Type",
    is_nullable as "Nullable",
    CASE 
        WHEN column_name IN ('pluggy_item_id', 'pluggy_account_id', 'bank_name', 'account_type') THEN 'üîó Pluggy Integration'
        WHEN column_name IN ('status', 'last_sync_at', 'sync_enabled') THEN '‚ö° Sync Status'
        WHEN column_name IN ('last_error', 'error_count') THEN 'üö® Error Tracking'
        ELSE 'üìã Standard'
    END as purpose
FROM information_schema.columns 
WHERE table_name = 'bank_connections' 
ORDER BY ordinal_position;

\echo ''
\echo 'üí≥ BANK TRANSACTIONS STRUCTURE'
\echo '-------------------------------'
SELECT 
    column_name as "Column",
    data_type as "Type",
    is_nullable as "Nullable",
    CASE 
        WHEN column_name LIKE 'pix_%' THEN 'üì± PIX Specific'
        WHEN column_name LIKE 'sender_%' THEN 'üë§ Sender Info'
        WHEN column_name IN ('match_status', 'processed_at') THEN 'üéØ Matching'
        WHEN column_name IN ('pluggy_transaction_id', 'raw_data') THEN 'üîó Pluggy Data'
        ELSE 'üìã Standard'
    END as purpose
FROM information_schema.columns 
WHERE table_name = 'bank_transactions' 
ORDER BY ordinal_position;

\echo ''
\echo 'üéØ PAYMENT MATCHES STRUCTURE'
\echo '-----------------------------'
SELECT 
    column_name as "Column",
    data_type as "Type",
    is_nullable as "Nullable",
    CASE 
        WHEN column_name IN ('match_type', 'match_confidence', 'match_reason') THEN 'ü§ñ AI Matching'
        WHEN column_name IN ('matched_amount', 'amount_difference') THEN 'üí∞ Financial'
        WHEN column_name IN ('status', 'confirmed_by', 'confirmed_at') THEN '‚úÖ Confirmation'
        ELSE 'üìã Standard'
    END as purpose
FROM information_schema.columns 
WHERE table_name = 'payment_matches' 
ORDER BY ordinal_position;

\echo ''
\echo 'üîç ENHANCED THERAPIST STRUCTURE'
\echo '--------------------------------'
SELECT 
    column_name as "Column",
    data_type as "Type",
    is_nullable as "Nullable",
    CASE 
        WHEN column_name IN ('billing_cycle', 'default_session_price', 'onboarding_completed', 'onboarding_started_at', 'onboarding_completed_at') THEN 'üÜï New'
        ELSE 'üìã Original'
    END as status
FROM information_schema.columns 
WHERE table_name = 'therapists' 
ORDER BY ordinal_position;

\echo ''
\echo 'üë• ENHANCED PATIENT STRUCTURE (with Dual Date System)'
\echo '-------------------------------------------------------'
SELECT 
    column_name as "Column",
    data_type as "Type",
    is_nullable as "Nullable",
    CASE 
        WHEN column_name IN ('therapy_start_date', 'lv_notas_billing_start_date', 'session_price', 'recurring_pattern', 'notes', 'cpf') THEN 'üÜï New'
        ELSE 'üìã Original'
    END as status
FROM information_schema.columns 
WHERE table_name = 'patients' 
ORDER BY ordinal_position;

\echo ''
\echo 'üìã VIEWS AVAILABLE'
\echo '------------------'
SELECT 
    table_name as "View Name",
    CASE 
        WHEN table_name = 'billable_sessions' THEN 'Sessions that count for billing based on dual date system'
        WHEN table_name = 'current_billing_settings' THEN 'Current billing configuration for all patients'
        WHEN table_name = 'therapist_onboarding_progress' THEN 'Onboarding progress for all therapists'
        WHEN table_name = 'billing_change_history' THEN 'Complete history of billing changes'
        WHEN table_name = 'unmatched_transactions_with_suggestions' THEN 'üè¶ Unmatched payments with AI suggestions'
        WHEN table_name = 'therapist_payment_summary' THEN 'üè¶ Payment overview by therapist'
        ELSE 'Other view'
    END as "Description"
FROM information_schema.views
WHERE table_schema = 'public'
ORDER BY table_name;

\echo ''
\echo 'üöÄ PERFORMANCE INDEXES'
\echo '-----------------------'
SELECT 
    tablename as "Table",
    indexname as "Index Name",
    CASE 
        WHEN indexname LIKE '%pkey' THEN 'üîë Primary Key'
        WHEN indexname LIKE 'idx_%billing%' THEN 'üí∞ Billing Performance'
        WHEN indexname LIKE 'idx_%bank%' OR indexname LIKE 'idx_%transaction%' OR indexname LIKE 'idx_%payment%' THEN 'üè¶ Banking Performance'
        WHEN indexname LIKE 'idx_%onboarding%' OR indexname LIKE 'idx_%imported%' OR indexname LIKE 'idx_%matching%' THEN 'üéØ Onboarding Performance'
        WHEN indexname LIKE 'idx_%' THEN '‚ö° Performance'
        ELSE 'üìã Other'
    END as "Type"
FROM pg_indexes
WHERE schemaname = 'public'
    AND indexname NOT LIKE '%pkey'
ORDER BY tablename, indexname;

\echo ''
\echo 'üìä DATA SUMMARY'
\echo '----------------'
SELECT 
    'Therapists' as "Table",
    COUNT(*) as "Records",
    SUM(CASE WHEN onboarding_completed THEN 1 ELSE 0 END) as "Onboarded"
FROM therapists
UNION ALL
SELECT 
    'Patients' as "Table",
    COUNT(*) as "Records",
    SUM(CASE WHEN lv_notas_billing_start_date IS NOT NULL THEN 1 ELSE 0 END) as "With Billing Start"
FROM patients
UNION ALL
SELECT 
    'Sessions' as "Table",
    COUNT(*) as "Records",
    SUM(CASE WHEN billable THEN 1 ELSE 0 END) as "Billable"
FROM sessions
UNION ALL
SELECT 
    'Bank Connections' as "Table",
    COUNT(*) as "Records",
    SUM(CASE WHEN status = 'active' THEN 1 ELSE 0 END) as "Active"
FROM bank_connections
UNION ALL
SELECT 
    'Bank Transactions' as "Table",
    COUNT(*) as "Records",
    SUM(CASE WHEN match_status = 'unmatched' THEN 1 ELSE 0 END) as "Unmatched"
FROM bank_transactions;

\echo ''
\echo 'üè¶ BANKING INTEGRATION STATUS'
\echo '------------------------------'
-- Check if banking tables exist and show status
DO $$
BEGIN
    IF EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'bank_connections') THEN
        RAISE NOTICE '‚úÖ Banking integration tables are installed';
        PERFORM 1; -- This allows the IF block to execute properly
    ELSE
        RAISE NOTICE '‚ùå Banking integration tables are missing';
    END IF;
END $$;

-- Show banking summary if tables exist
SELECT 
    bc.bank_name as "Bank",
    COUNT(*) as "Connections",
    COUNT(CASE WHEN bc.status = 'active' THEN 1 END) as "Active",
    COUNT(bt.id) as "Transactions",
    COUNT(CASE WHEN bt.match_status = 'unmatched' THEN 1 END) as "Unmatched"
FROM bank_connections bc
LEFT JOIN bank_transactions bt ON bc.id = bt.bank_connection_id
GROUP BY bc.bank_name
ORDER BY "Connections" DESC;

\echo ''
\echo 'üí∞ BILLING OVERVIEW'
\echo '--------------------'
SELECT * FROM current_billing_settings ORDER BY therapist_name, patient_name LIMIT 10;

\echo ''
\echo '‚úÖ SCHEMA CHECK COMPLETE!'
\echo '========================='
\echo 'If all sections show data, your schema is properly set up for:'
\echo '‚Ä¢ Enhanced therapist onboarding with calendar import'
\echo '‚Ä¢ Dual date system (historical vs billing start dates)'  
\echo '‚Ä¢ Advanced billing cycle management with full history'
\echo '‚Ä¢ Smart patient matching and recurring session detection'
\echo '‚Ä¢ üè¶ Banking integration with Pluggy for automatic payment tracking'
\echo '‚Ä¢ ü§ñ AI-powered payment matching with confidence scoring'
\echo '‚Ä¢ üì± PIX payment support with CPF-based patient identification'
\echo '‚Ä¢ Complete audit trail for all billing changes'